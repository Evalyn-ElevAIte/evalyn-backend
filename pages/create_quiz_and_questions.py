import streamlit as st
import requests
import json

st.set_page_config(layout="wide")

st.title("Create Quiz and Questions")

# Quiz Details
st.header("Quiz Details")
quiz_title = st.text_input("Quiz Title")
quiz_description = st.text_area("Quiz Description")
creator_id = st.number_input(
    "Creator ID", min_value=1, value=1
)  # Assuming a default creator_id for testing


# Quiz Status
status = st.selectbox(
    "Quiz Status",
    ["published", "done", "unfinished", "submitted", "graded"],
    index=0  # Default to "published"
)

# Questions
st.header("Questions")
num_questions = st.number_input("Number of Questions", min_value=1, value=1)

questions_data = []
for i in range(num_questions):
    st.subheader(f"Question {i+1}")
    question_text = st.text_area(f"Question {i+1} Text", key=f"q_text_{i}")
    question_type = st.selectbox(
        f"Question {i+1} Type", ["text / essay", "multiple choices"], key=f"q_type_{i}"
    )
    lecturer_answer_text = None
    options = None
    correct_answer_mc = None

    if question_type == "text / essay":
        lecturer_answer_text = st.text_area(f"Question {i+1} Lecturer Answer (Essay)", key=f"q_lecturer_ans_{i}")
    elif question_type == "multiple choices":
        st.markdown("---")
        st.subheader(f"Question {i+1} Multiple Choice Options")
        mc_options = []
        for j in range(4): # Assuming 4 options for now
            option_text = st.text_input(f"Option {j+1}", key=f"q_option_{i}_{j}")
            mc_options.append(option_text)
        options = json.dumps(mc_options) # Store as JSON string

        correct_answer_mc = st.selectbox(f"Question {i+1} Correct Option", mc_options, key=f"q_correct_mc_{i}")
        st.markdown("---")

    rubric = st.text_area(f"Question {i+1} Rubric", key=f"q_rubric_{i}")
    rubric_max_score = st.number_input(
        f"Question {i+1} Max Score", min_value=0, value=10, key=f"q_score_{i}"
    )

    questions_data.append(
        {
            "text": question_text,
            "type": question_type,
            "lecturer_answer_text": lecturer_answer_text,
            "options": options,
            "correct_answer_mc": correct_answer_mc,
            "rubric": rubric,
            "rubric_max_score": rubric_max_score,
        }
    )

if st.button("Create Quiz and Questions"):
    if not quiz_title.strip() or not quiz_description.strip():
        st.error("Please fill in Quiz Title and Description")
    else:
        quiz_payload = {
            "creator_id": creator_id,
            "title": quiz_title,
            "description": quiz_description,
            "lecturer_overall_notes": None,
            "join_code": "",  # This will be generated by the backend
            "status": status,
        }

        try:
            # 1. Create the quiz
            st.info("Creating quiz...")
            quiz_response = requests.post(
                "http://localhost:8000/api/quiz/", json=quiz_payload
            )
            quiz_response.raise_for_status()  # Raise an exception for HTTP errors
            quiz = quiz_response.json()
            quiz_id = quiz["id"]
            st.success(
                f"Quiz created successfully! Quiz ID: {quiz_id}, Join Code: {quiz['join_code']}"
            )

            # 2. Create the questions
            st.info("Creating questions...")
            for i, question_data in enumerate(questions_data):
                question_payload = {
                    **question_data,
                    "quiz_id": quiz_id,
                    "question_id": f"q_{i+1}",  # Placeholder
                }
                question_response = requests.post(
                    "http://localhost:8000/api/questions/", json=question_payload
                )
                question_response.raise_for_status()
                st.success(f"Question {i+1} created successfully!")

            st.balloons()
            st.success("All questions created successfully!")

        except requests.exceptions.ConnectionError:
            st.error(
                "Connection Error: Make sure the backend server is running at http://localhost:8000"
            )
        except requests.exceptions.HTTPError as e:
            st.error(f"HTTP Error: {e.response.status_code} - {e.response.text}")
        except Exception as e:
            st.error(f"An unexpected error occurred: {e}")
