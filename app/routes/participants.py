from fastapi import APIRouter, HTTPException, status as http_status
from tortoise.exceptions import IntegrityError

# Option A: using the hand‐written Pydantic schemas from step 1
from app.schemas.quiz_participants import QuizParticipantCreate, QuizParticipantRead

# Option B: using the autogenerated Pydantic models from step 2
# from .schemas import QuizParticipantIn_Pydantic, QuizParticipant_Pydantic

from app.models.models import QuizParticipant

router = APIRouter()


@router.post(
    "",
    response_model=QuizParticipantRead,  # or QuizParticipant_Pydantic if you used the autogenerated one
    status_code=http_status.HTTP_201_CREATED,
)
async def create_quiz_participant(payload: QuizParticipantCreate):
    """
    Create a new QuizParticipant: link a user to a quiz with a given status.
    """
    try:
        participant_obj = await QuizParticipant.create(
            user_id=payload.user_id,
            quiz_id=payload.quiz_id,
            status=payload.status,
        )
    except IntegrityError as e:
        # Common reasons: 
        # 1) User or Quiz with given ID doesn't exist (FK constraint)
        # 2) You might have a unique constraint you violated
        raise HTTPException(
            status_code=http_status.HTTP_400_BAD_REQUEST,
            detail="Could not create participant (maybe invalid user_id/quiz_id or duplicate).",
        )

    # At this point, `participant_obj` has id and joined_at populated
    # Return a Pydantic‐validated object:
    return await QuizParticipantRead.from_tortoise_orm(participant_obj)
    # If you used autogenerated Pydantic models, do:
    # return await QuizParticipant_Pydantic.from_tortoise_orm(participant_obj)
